#+TITLE: Simple Emacs for Simple Users
#+OPTIONS: toc:nil
#+STARTUP: indent

** Introduction
GNU Emacs is a beast that cannot be tamed easily. But once you know its
workarounds, it will be a place better than heaven. So, I have tried to convert
this beast into a puppy that you will love using. If the puppy gets harsh on you
then open an [[https://github.com/Compro-Prasad/simple-emacs/issues][issue]] or send a [[https://github.com/Compro-Prasad/simple-emacs/pulls][pull request]] so that the beast becomes nicer than
before.

** Target users
This configuration is targeted towards new users who have been using modern
editors like Sublime Text and want to see the power of Emacs.

If you are a Vim user then you might want to checkout [[https://spacemacs.org][Spacemacs]] which has
everything setup top to bottom for Vim experience in Emacs.

If you are a power user and you want to squeeze out every functionality out of
Emacs then you should go with [[https://spacemacs.org][Spacemacs]] which has far better support for
grouping buffers and different window configurations.

** Tested on GNU Emacs development build
It is recommended that you use Emacs development build instead of normal builds.

For Ubuntu:
#+BEGIN_SRC shell :exports code
  sudo add-apt-repository ppa:ubuntu-elisp/ppa
  sudo apt-get update
  sudo apt-get install emacs-snapshot
#+END_SRC

For Arch Linux:
#+BEGIN_SRC shell :exports code
  pacaur -S emacs-git
#+END_SRC

For Mac OS:
#+BEGIN_SRC shell :exports code
  brew install emacs-mac --with-cocoa --with-xml2 --with-gnutls --with-imagemagick --with-glib --HEAD
#+END_SRC

It is better to compile from source but that is totally upto you.

** Installing =simple-emacs=
If you have been using Emacs from before then backup your configurations:
#+BEGIN_SRC shell :exports code
  mv ~/.emacs.d ~/.emacs.d.bak
  mv ~/.emacs ~/.emacs.bak
#+END_SRC
Clone the =simple-emacs= repository using git:
#+BEGIN_SRC shell :exports code
  git clone https://github.com/Compro-Prasad/simple-emacs.git ~/.emacs.d
#+END_SRC
Now open your Emacs and start doing your stuff.

** Some conventions
- ~C-x~ → Ctrl + X
- ~M-x~ → Alt + X
- ~C-S-x~ → Ctrl + Shift + X
- ~C-M-x~ → Ctrl + Alt + X
- ~M-S-x~ → Alt + Shift + x

** ~C-g~ the Panic key
When you think you pressed the wrong key or Emacs isn't responding then you can
press ~C-g~ to cancel any action.

** Files and Projects
- Press ~C-n~ create an unsaved buffer. Use ~C-s~ to save it else it will be
  lost in the next session.
- Press ~C-o~ to open or create a file.
- Use native ~C-x C-f~ to do any of the above but using Helm interface.
- *File > Open project* opens project in sidebar.
- Clicking on extreme left of window toggles sidebar.
- Using ~C-b~ to toggle sidebar is very useful but tricky. It might
  ask for user input in minibuffer.
- ~C-S-b~ toggles sidebar if you had it open before else it will ask
  you the directory in a Helm completion to show the sidebar.

** Multiple cursors
Work in progress.
| Select next occurance     | ~M-S-down~  |
| Select previous occurance | ~M-S-up~    |
| Select all occurances     | ~C-;~       |
| Create cursor with mouse  | ~M-S-click~ |

** Undo and Redo
- To undo a change press ~C-z~.
- To redo changes press ~C-S-z~.
- If the undo/redo is confusing you then press ~C-/~ to visualize undo tree. Use
  ~q~ to close the tree.
- Undo history is saved throughout sessions.

** Switching tabs and buffers
- You can switch tabs using ~C-TAB~ and ~C-S-TAB~.
- To switch buffers use ~C-x C-right~ and ~C-x C-left~.
- Each buffer is assigned to an unique tab.
- ~C-x b~ lists all buffers in current session.
- Tabs are grouped by projects. Use ~-~ in top left corner to switch projects.

** Closing tabs
- Closing a tab is analogous to closing a buffer.
- ~C-w~ or ~C-x k~ to close any tab.
- ~C-f4~ to close current tab.

** Searching
- ~C-f~ does forward search
- ~C-S-f~ does backward search
- ~C-r~ searches in a Git project. If it is not a Git repository then directory
  is asked first. For it to work in absence of git project install
  [[https://github.com/ggreer/the_silver_searcher][the_silver_searcher]]:

Ubuntu:
#+BEGIN_SRC shell :exports code
sudo apt install silversearcher-ag
#+END_SRC
Arch Linux:
#+BEGIN_SRC shell :exports code
sudo pacman -S the_silver_searcher
#+END_SRC

** Shell
- There are three shells in Emacs: ~shell~, ~eshell~ and ~term~
- Default shell is ~eshell~
- Use ~C-l~ to clear eshell buffer
- Pop up, switch or close shell using ~C-'~
- In Eshell, type use-theme to list and preview available themes
- To customize shell behaviour look into ~simple-shell.el~

** C/C++ setup
Install clang++ on your distro for better experience.
To auto compile a single C++ file your file should have:
#+BEGIN_SRC C++ -i :exports code
/*= compile: g++ -std=c++11 -Wall -Werror -o $exe $src =*/
/*= run: $exe =*/
#+END_SRC
at top of your file. To insert this code snippet type ~compile~ (in the buffer
and not in the ~M-x~ prompt) and hit ~TAB~ key.

If you are into competitive programming then you might want to try ~cp~ then hit
~TAB~. For this you may need to create ~input.txt~ with program's input.

Use ~F9~ to run your single file programs.

** Preview HTML pages
When you open an HTML file in Emacs you can see its live preview by going to
[[http://localhost:8080/imp/]].

** Python
To make Emacs a Python IDE, you need to have anaconda_mode installed:
#+BEGIN_SRC shell :exports code
sudo pip2 install anaconda_mode   # For python2
sudo pip3 install anaconda_mode   # For python3
#+END_SRC
This will enable syntax checking and symbol completion for python files.

- Find definitions using ~M-.~
- Find assignments using ~M-*~
- Find references using ~M-r~
- Jump back to previous location using ~M-,~
- Activate virtual environment using ~M-x pyvenv-activate~. Enter root directory
  of the virtual environment as input.
- If you are using ~pipenv~ then you can easily do ~M-x pipenv-activate~.

See [[https://github.com/proofit404/anaconda-mode#interactive-commands][official repository]] for more information on keybindings for jumping to
definitions and stuff.

** Toggling features
| Keybinding | Feature         | Function        |
|------------+-----------------+-----------------|
| ~C-S-t m~  | Menu bar        | ~menu-bar-mode~ |
| ~C-S-t t~  | Tool bar        | ~tool-bar-mode~ |
| ~C-S-t l~  | Line numbers    | ~linum-mode~    |
| ~C-S-t s~  | Syntax checking | ~flycheck-mode~ |
| ~C-S-t c~  | Completion      | ~company-mode~  |
